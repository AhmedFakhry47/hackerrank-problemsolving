# -*- coding: utf-8 -*-
"""Dynamic_array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T6ZnR8B0GbtBON97PvK9hV20mI-ztpyP
"""

import ctypes
from copy import deepcopy

class DynamicArray:

  def __init__(self,):
    self.n = 0 # the current number of elements added to the array
    self.capacity = 1 # Initial capacity of the dynamic array is one 
    self.array    = self.make_array(self.capacity)

  def __len__(self,):
    return self.n
  
  def __getitem__(self,k):
    return self.array[k]

  def insert_at(self,element,k):
    if self.n == self.capacity:
      self.resize(2*self.capacity)
    
    self.array[k+1:self.n+1] = self.array[k:self.n]
    self.array[k] = element
    self.n +=1
    return 

  
  def remove_at(self,k):
    self.array[k:self.n-1] = self.array[k+1:self.n]
    self.array[self.n] = 0
    self.n -=1 
    return 

  def add_element(self,element):
    # First check whether the array is full or not
    if self.n == self.capacity:
      self.resize(2*self.capacity)
    
    self.array[self.n] = element
    self.n +=1 

    return 

  def resize(self,new_capacity):
    new_array = self.make_array(new_capacity)

    for i in range(self.n):
      new_array[i] = self.array[i]

    self.array = new_array
    self.capacity = new_capacity
    return 

  def make_array(self,capacity):
    return (capacity * ctypes.py_object)()

  def get_array(self):
    return list(self.array[:self.n])

dynamic_r = DynamicArray()
dynamic_r.add_element(4)
dynamic_r.get_array()
dynamic_r.add_element(9)
dynamic_r.get_array()
dynamic_r.add_element(10)
dynamic_r.get_array()
dynamic_r.insert_at(11,0)
dynamic_r.get_array()
dynamic_r.insert_at(11,3)
dynamic_r.get_array()
dynamic_r.insert_at(11,2)
dynamic_r.get_array()
dynamic_r.remove_at(2)
dynamic_r.get_array()